(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{23:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>w});var i,a=t(5155),s=t(2115),r={},o=function(){if(i)return r;i=1,Object.defineProperty(r,"__esModule",{value:!0}),r.styleq=void 0;var e=new WeakMap;function n(n){var t,i,a;return null!=n&&(t=!0===n.disableCache,i=!0===n.disableMix,a=n.transform),function(){for(var n=[],s="",r=null,o="",l=t?null:e,c=Array(arguments.length),d=0;d<arguments.length;d++)c[d]=arguments[d];for(;c.length>0;){var p=c.pop();if(null!=p&&!1!==p){if(Array.isArray(p)){for(var u=0;u<p.length;u++)c.push(p[u]);continue}var m=null!=a?a(p):p;if(null!=m.$$css){var h="";if(null!=l&&l.has(m)){var g=l.get(m);null!=g&&(h=g[0],o=g[2],n.push.apply(n,g[1]),l=g[3])}else{var y=[];for(var f in m){var x=m[f];if("$$css"===f){var b=m[f];!0!==b&&(o=o?b+"; "+o:b);continue}"string"==typeof x||null===x?n.includes(f)||(n.push(f),null!=l&&y.push(f),"string"==typeof x&&(h+=h?" "+x:x)):console.error("styleq: ".concat(f," typeof ").concat(String(x),' is not "string" or "null".'))}if(null!=l){var v=new WeakMap;l.set(m,[h,y,o,v]),l=v}}h&&(s=s?h+" "+s:h)}else if(i)null==r&&(r={}),r=Object.assign({},m,r);else{var w=null;for(var k in m){var C=m[k];void 0===C||n.includes(k)||(null!=C&&(null==r&&(r={}),null==w&&(w={}),w[k]=C),n.push(k),l=null)}null!=w&&(r=Object.assign(w,r))}}}return[s,r,o]}}return(r.styleq=n()).factory=n,r}();let l=e=>Error(`Unexpected 'stylex.${e}' call at runtime. Styles must be compiled by '@stylexjs/babel-plugin'.`),c=e=>l(`types.${e}`);function d(...e){let[n]=o.styleq(e);return n}d.create=function(e){throw l("create")},d.createTheme=(e,n)=>{throw l("createTheme")},d.defineVars=function(e){throw l("defineVars")},d.defaultMarker=()=>{throw l("defaultMarker")},d.firstThatWorks=(...e)=>{throw l("firstThatWorks")},d.keyframes=e=>{throw l("keyframes")},d.positionTry=e=>{throw l("positionTry")},d.props=function(...e){let[n,t,i]=o.styleq(e),a={};return null!=n&&""!==n&&(a.className=n),null!=t&&Object.keys(t).length>0&&(a.style=t),null!=i&&""!==i&&(a["data-style-src"]=i),a},d.types={angle:e=>{throw c("angle")},color:e=>{throw c("color")},url:e=>{throw c("url")},image:e=>{throw c("image")},integer:e=>{throw c("integer")},lengthPercentage:e=>{throw c("lengthPercentage")},length:e=>{throw c("length")},percentage:e=>{throw c("percentage")},number:e=>{throw c("number")},resolution:e=>{throw c("resolution")},time:e=>{throw c("time")},transformFunction:e=>{throw c("transformFunction")},transformList:e=>{throw c("transformList")}},d.when={ancestor:e=>{throw l("when.ancestor")},descendant:e=>{throw l("when.descendant")},siblingBefore:e=>{throw l("when.siblingBefore")},siblingAfter:e=>{throw l("when.siblingAfter")},anySibling:e=>{throw l("when.anySibling")}},d.viewTransitionClass=e=>{throw l("viewTransitionClass")};let p=[{id:"1",name:"Sarah Chen",avatar:"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=200&h=200&fit=crop",bio:"Software engineer and tech writer passionate about web development and user experience."},{id:"2",name:"Marcus Johnson",avatar:"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop",bio:"Full-stack developer with a love for clean code and modern architecture."},{id:"3",name:"Elena Rodriguez",avatar:"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=200&h=200&fit=crop",bio:"Design-focused developer bridging the gap between aesthetics and functionality."}],u=[{id:"1",name:"Web Development",slug:"web-development",description:"Articles about modern web development practices and technologies"},{id:"2",name:"Design Systems",slug:"design-systems",description:"Building and maintaining scalable design systems"},{id:"3",name:"Performance",slug:"performance",description:"Optimizing web applications for speed and efficiency"},{id:"4",name:"Developer Experience",slug:"developer-experience",description:"Improving workflows and tooling for developers"}],m=[{id:"1",title:"Building Scalable Design Systems with TypeScript and StyleX",slug:"building-scalable-design-systems",author:p[2],publishedDate:new Date("2025-09-15"),excerpt:"Learn how to create a maintainable design system using TypeScript for type safety and StyleX for atomic CSS generation.",content:"# Building Scalable Design Systems with TypeScript and StyleX\n\nDesign systems are the backbone of modern web applications, providing consistency and efficiency across teams. In this article, we'll explore how combining TypeScript with StyleX creates a powerful foundation for scalable design systems.\n\n## Why Design Systems Matter\n\nA well-crafted design system ensures:\n- **Consistency** across all user interfaces\n- **Efficiency** in development through reusable components\n- **Maintainability** with clear guidelines and documentation\n- **Accessibility** built-in from the start\n\n## TypeScript for Type Safety\n\nTypeScript brings static typing to your design tokens and component APIs. This means catching errors at compile-time rather than runtime, and providing excellent autocomplete in your IDE.\n\n```typescript\ninterface ButtonProps {\n  variant: 'primary' | 'secondary' | 'outline';\n  size: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n}\n```\n\n## StyleX for Atomic CSS\n\nStyleX generates optimized atomic CSS at build time, eliminating duplicate styles and creating a minimal CSS bundle. It works seamlessly with TypeScript, providing type-safe style definitions.\n\n## Best Practices\n\n1. **Define your tokens first** - colors, spacing, typography\n2. **Create primitive components** - buttons, inputs, cards\n3. **Build composed components** - forms, navigation, layouts\n4. **Document everything** - use Storybook or similar tools\n5. **Test accessibility** - automated and manual testing\n\n## Conclusion\n\nThe combination of TypeScript and StyleX provides a robust foundation for design systems that scale with your team and product. Start small, iterate often, and always prioritize developer experience.",featuredImage:"https://images.unsplash.com/photo-1558655146-9f40138edfeb?w=800&h=400&fit=crop",categories:["Design Systems","Web Development"],tags:["TypeScript","StyleX","CSS","Design"],readTime:8},{id:"2",title:"Modern React Patterns: Container and Presentational Components",slug:"modern-react-patterns",author:p[0],publishedDate:new Date("2025-09-22"),excerpt:"Discover how separating business logic from UI components leads to more maintainable and testable React applications.",content:"# Modern React Patterns: Container and Presentational Components\n\nOne of the most enduring patterns in React development is the separation between container and presentational components. Let's explore why this pattern remains relevant in modern React.\n\n## The Pattern Explained\n\n**Presentational Components:**\n- Focus on how things look\n- Receive data via props\n- No side effects or data fetching\n- Highly reusable and testable\n\n**Container Components:**\n- Focus on how things work\n- Manage state and side effects\n- Handle data fetching\n- Compose presentational components\n\n## Example: Blog Post Card\n\n```typescript\n// Presentational Component\nfunction BlogPostCard({ title, excerpt, image }: BlogPostCardProps) {\n  return (\n    <article>\n      <img src={image} alt={title} />\n      <h2>{title}</h2>\n      <p>{excerpt}</p>\n    </article>\n  );\n}\n\n// Container Component\nfunction BlogPostCardContainer({ postId }: { postId: string }) {\n  const { data, loading } = useBlogPost(postId);\n\n  if (loading) return <Skeleton />;\n  if (!data) return null;\n\n  return <BlogPostCard {...data} />;\n}\n```\n\n## Benefits\n\n1. **Separation of Concerns** - UI and logic are decoupled\n2. **Reusability** - Presentational components work anywhere\n3. **Testability** - Each layer can be tested independently\n4. **Maintainability** - Changes are isolated to specific layers\n\n## Modern Considerations\n\nWith hooks, some argue this pattern is less necessary. However, the principle of separating concerns remains valuable, even if the implementation has evolved.\n\n## Conclusion\n\nWhether you strictly follow the container/presentational pattern or adapt it with hooks, the core principle of separating UI from logic makes React applications more maintainable and scalable.",featuredImage:"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop",categories:["Web Development"],tags:["React","Architecture","Best Practices"],readTime:6},{id:"3",title:"Optimizing Web Performance: Core Web Vitals Deep Dive",slug:"optimizing-web-performance",author:p[1],publishedDate:new Date("2025-09-28"),excerpt:"A comprehensive guide to understanding and improving Core Web Vitals for better user experience and SEO.",content:"# Optimizing Web Performance: Core Web Vitals Deep Dive\n\nCore Web Vitals are Google's metrics for measuring user experience on the web. Let's dive deep into each metric and learn how to optimize them.\n\n## The Three Core Web Vitals\n\n### 1. Largest Contentful Paint (LCP)\n\nLCP measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds.\n\n**Optimization strategies:**\n- Optimize images with modern formats (WebP, AVIF)\n- Implement lazy loading for below-fold content\n- Use CDN for static assets\n- Minimize render-blocking resources\n\n### 2. First Input Delay (FID)\n\nFID measures interactivity. Pages should have an FID of 100 milliseconds or less.\n\n**Optimization strategies:**\n- Break up long tasks\n- Optimize JavaScript execution\n- Use web workers for heavy computations\n- Implement code splitting\n\n### 3. Cumulative Layout Shift (CLS)\n\nCLS measures visual stability. Pages should maintain a CLS of 0.1 or less.\n\n**Optimization strategies:**\n- Always include size attributes on images and videos\n- Reserve space for ad slots\n- Avoid inserting content above existing content\n- Use CSS transforms for animations\n\n## Measuring Performance\n\nUse tools like:\n- Chrome DevTools Lighthouse\n- PageSpeed Insights\n- Web Vitals JavaScript library\n- Real User Monitoring (RUM)\n\n## The Performance Budget\n\nSet performance budgets for your team:\n- Maximum JavaScript bundle size\n- Maximum image sizes\n- Target LCP, FID, and CLS values\n\n## Conclusion\n\nOptimizing Core Web Vitals isn't just about better search rankings—it's about providing a better experience for your users. Start measuring, set goals, and iterate continuously.",featuredImage:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=400&fit=crop",categories:["Performance"],tags:["Web Performance","SEO","Core Web Vitals"],readTime:10},{id:"4",title:"The Art of Code Review: Building Better Teams",slug:"art-of-code-review",author:p[1],publishedDate:new Date("2025-10-02"),excerpt:"Code reviews are more than catching bugs—they're opportunities to share knowledge, improve code quality, and build team culture.",content:'# The Art of Code Review: Building Better Teams\n\nCode reviews are one of the most valuable practices in software development, yet they\'re often done poorly or inconsistently. Let\'s explore how to make code reviews effective and positive.\n\n## Why Code Review Matters\n\n- **Knowledge sharing** across the team\n- **Catching bugs** before they reach production\n- **Improving code quality** through collective ownership\n- **Onboarding** new team members effectively\n- **Building team culture** through collaboration\n\n## Best Practices for Reviewers\n\n### 1. Be Constructive, Not Critical\n\n❌ "This code is terrible."\n✅ "Consider extracting this into a separate function for better readability."\n\n### 2. Ask Questions\n\nInstead of making demands, ask questions that prompt discussion:\n- "What happens if this value is null?"\n- "Have you considered using a different approach here?"\n\n### 3. Praise Good Code\n\nDon\'t just point out problems—celebrate clever solutions and well-written code.\n\n### 4. Focus on the Important\n\nNot every style preference needs a comment. Focus on:\n- Logic errors\n- Security vulnerabilities\n- Performance issues\n- Maintainability concerns\n\n## Best Practices for Authors\n\n### 1. Keep PRs Small\n\nSmaller PRs are:\n- Easier to review thoroughly\n- Faster to merge\n- Lower risk if something goes wrong\n\n### 2. Write Helpful Descriptions\n\nExplain the context, your approach, and any tradeoffs you considered.\n\n### 3. Respond Thoughtfully\n\nEngage with feedback constructively. If you disagree, explain your reasoning calmly.\n\n### 4. Use Checklists\n\nCreate a pre-submit checklist:\n- [ ] Tests added\n- [ ] Documentation updated\n- [ ] No console.logs\n- [ ] Accessibility considered\n\n## Automation Helps\n\nAutomate what you can:\n- Linting and formatting\n- Unit tests\n- Type checking\n- Security scanning\n\nThis frees up reviewers to focus on architecture and logic.\n\n## Conclusion\n\nGreat code reviews build great teams. Approach each review as a learning opportunity, treat your colleagues with respect, and focus on improving both the code and your team culture.',featuredImage:"https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=800&h=400&fit=crop",categories:["Developer Experience"],tags:["Code Review","Team Culture","Best Practices"],readTime:7},{id:"5",title:"Mastering CSS Grid: Beyond the Basics",slug:"mastering-css-grid",author:p[2],publishedDate:new Date("2025-10-05"),excerpt:"CSS Grid is powerful, but most developers only scratch the surface. Let's explore advanced techniques for complex layouts.",content:'# Mastering CSS Grid: Beyond the Basics\n\nCSS Grid revolutionized web layouts, but many developers still rely on flexbox for everything. Let\'s explore advanced Grid techniques that make complex layouts simple.\n\n## Grid Areas for Complex Layouts\n\nNamed grid areas make responsive layouts intuitive:\n\n```css\n.layout {\n  display: grid;\n  grid-template-areas:\n    "header header header"\n    "sidebar main aside"\n    "footer footer footer";\n  grid-template-columns: 200px 1fr 200px;\n}\n\n@media (max-width: 768px) {\n  .layout {\n    grid-template-areas:\n      "header"\n      "main"\n      "sidebar"\n      "aside"\n      "footer";\n    grid-template-columns: 1fr;\n  }\n}\n```\n\n## Implicit Grid for Dynamic Content\n\nThe implicit grid automatically creates rows/columns for overflowing content:\n\n```css\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-auto-rows: 250px;\n  gap: 1rem;\n}\n```\n\n## Subgrid for Alignment\n\nSubgrid allows nested grids to align with parent grid tracks:\n\n```css\n.card {\n  display: grid;\n  grid-template-columns: subgrid;\n  grid-column: span 3;\n}\n```\n\n## Advanced Techniques\n\n### 1. Overlap and Z-Index\n\nGrid items can overlap, creating interesting layouts:\n\n```css\n.hero-image {\n  grid-area: 1 / 1 / 2 / 3;\n  z-index: 1;\n}\n\n.hero-text {\n  grid-area: 1 / 2 / 2 / 4;\n  z-index: 2;\n}\n```\n\n### 2. Dense Packing\n\nFill gaps in your grid automatically:\n\n```css\n.masonry {\n  grid-auto-flow: dense;\n}\n```\n\n### 3. Aspect Ratio with Grid\n\nMaintain aspect ratios without padding hacks:\n\n```css\n.square {\n  aspect-ratio: 1 / 1;\n}\n```\n\n## When to Use Grid vs Flexbox\n\n- **Grid**: Two-dimensional layouts, complex alignments\n- **Flexbox**: One-dimensional layouts, simple alignments\n\nOften the best solution uses both!\n\n## Conclusion\n\nCSS Grid is incredibly powerful once you move beyond basic row/column layouts. Experiment with these advanced techniques to create sophisticated, responsive designs with less code.',featuredImage:"https://images.unsplash.com/photo-1507721999472-8ed4421c4af2?w=800&h=400&fit=crop",categories:["Web Development","Design Systems"],tags:["CSS","Grid","Layout","Responsive Design"],readTime:9},{id:"6",title:"Building Accessible Forms: A Complete Guide",slug:"building-accessible-forms",author:p[0],publishedDate:new Date("2025-10-08"),excerpt:"Forms are critical to web applications, but they're often inaccessible. Learn how to build forms that work for everyone.",content:'# Building Accessible Forms: A Complete Guide\n\nForms are the primary way users interact with web applications, yet they\'re often the least accessible part of a website. Let\'s fix that.\n\n## The Fundamentals\n\n### 1. Proper Labels\n\nEvery input needs a label. Period.\n\n```html\n\x3c!-- Good --\x3e\n<label for="email">Email Address</label>\n<input id="email" type="email" name="email" />\n\n\x3c!-- Also good --\x3e\n<label>\n  Email Address\n  <input type="email" name="email" />\n</label>\n```\n\n### 2. Fieldsets and Legends\n\nGroup related inputs:\n\n```html\n<fieldset>\n  <legend>Shipping Address</legend>\n  \x3c!-- address inputs --\x3e\n</fieldset>\n```\n\n### 3. Required Fields\n\nMark required fields programmatically:\n\n```html\n<input\n  type="text"\n  required\n  aria-required="true"\n  aria-label="First name (required)"\n/>\n```\n\n## Error Handling\n\n### Inline Validation\n\nProvide immediate, helpful feedback:\n\n```html\n<div>\n  <label for="password">Password</label>\n  <input\n    id="password"\n    type="password"\n    aria-invalid="true"\n    aria-describedby="password-error"\n  />\n  <span id="password-error" role="alert">\n    Password must be at least 8 characters\n  </span>\n</div>\n```\n\n### Error Summary\n\nProvide a summary of all errors:\n\n```html\n<div role="alert" aria-live="polite">\n  <h2>Please fix the following errors:</h2>\n  <ul>\n    <li><a href="#email">Email is required</a></li>\n    <li><a href="#password">Password is too short</a></li>\n  </ul>\n</div>\n```\n\n## Focus Management\n\n### 1. Logical Tab Order\n\nEnsure tab order follows visual order:\n\n```css\n/* Avoid tabindex > 0 */\nbutton { tabindex: 0; }\n```\n\n### 2. Focus Styles\n\nAlways have visible focus indicators:\n\n```css\ninput:focus {\n  outline: 2px solid #0066cc;\n  outline-offset: 2px;\n}\n```\n\n### 3. Skip Links\n\nHelp keyboard users skip repetitive navigation:\n\n```html\n<a href="#main-content" class="skip-link">\n  Skip to main content\n</a>\n```\n\n## ARIA Attributes\n\nUse ARIA to enhance native HTML:\n\n- `aria-label`: Accessible name\n- `aria-describedby`: Additional description\n- `aria-invalid`: Validation state\n- `aria-required`: Required field\n- `aria-live`: Dynamic content updates\n\n## Testing\n\n1. **Keyboard only**: Can you complete the form without a mouse?\n2. **Screen reader**: Test with NVDA, JAWS, or VoiceOver\n3. **Automated tools**: Use axe, Lighthouse, WAVE\n4. **Real users**: Nothing beats testing with actual users with disabilities\n\n## Conclusion\n\nAccessible forms aren\'t just good for users with disabilities—they\'re better for everyone. Clear labels, helpful errors, and logical flow improve the experience for all users.',featuredImage:"https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?w=800&h=400&fit=crop",categories:["Web Development"],tags:["Accessibility","Forms","HTML","ARIA"],readTime:11},{id:"7",title:"Understanding React Server Components",slug:"understanding-react-server-components",author:p[0],publishedDate:new Date("2025-10-11"),excerpt:"React Server Components represent a paradigm shift in how we build React applications. Let's demystify how they work.",content:"# Understanding React Server Components\n\nReact Server Components (RSC) are changing how we think about React applications. Let's break down what they are, how they work, and when to use them.\n\n## What Are Server Components?\n\nServer Components are React components that run exclusively on the server. They:\n- Don't ship JavaScript to the client\n- Can directly access server-side resources\n- Support async/await natively\n- Improve performance and reduce bundle size\n\n## Server vs Client Components\n\n### Server Components (default in Next.js 13+)\n\n```tsx\n// This runs on the server\nasync function BlogPost({ id }: { id: string }) {\n  const post = await db.posts.findById(id);\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  );\n}\n```\n\n### Client Components\n\n```tsx\n'use client';\n\nimport { useState } from 'react';\n\nfunction LikeButton() {\n  const [likes, setLikes] = useState(0);\n\n  return (\n    <button onClick={() => setLikes(likes + 1)}>\n      Likes: {likes}\n    </button>\n  );\n}\n```\n\n## When to Use Each\n\n**Server Components:**\n- Fetching data\n- Accessing backend resources\n- Keeping sensitive data on server\n- Reducing bundle size\n\n**Client Components:**\n- User interactions (onClick, onChange)\n- Browser APIs (localStorage, geolocation)\n- State and effects (useState, useEffect)\n- Custom hooks\n\n## Composition Patterns\n\nYou can nest components in flexible ways:\n\n```tsx\n// Server Component\nasync function BlogPage() {\n  const posts = await fetchPosts();\n\n  return (\n    <div>\n      {posts.map(post => (\n        <BlogCard key={post.id} post={post}>\n          {/* Client Component nested inside */}\n          <LikeButton postId={post.id} />\n        </BlogCard>\n      ))}\n    </div>\n  );\n}\n```\n\n## Data Fetching\n\nServer Components make data fetching simple:\n\n```tsx\nasync function UserProfile({ userId }: { userId: string }) {\n  // Multiple requests in parallel\n  const [user, posts] = await Promise.all([\n    fetch(`/api/users/${userId}`).then(r => r.json()),\n    fetch(`/api/posts?userId=${userId}`).then(r => r.json()),\n  ]);\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <PostList posts={posts} />\n    </div>\n  );\n}\n```\n\n## Benefits\n\n1. **Performance**: Less JavaScript shipped to client\n2. **Direct backend access**: No API layer needed\n3. **Automatic code splitting**: Each Server Component is a split point\n4. **SEO**: Full HTML rendered on server\n\n## Challenges\n\n1. **Learning curve**: New mental model\n2. **Ecosystem maturity**: Not all libraries support RSC yet\n3. **Debugging**: Server errors can be harder to trace\n\n## Conclusion\n\nReact Server Components represent the future of React development. While there's a learning curve, the benefits in performance and developer experience are significant. Start experimenting today!",featuredImage:"https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=800&h=400&fit=crop",categories:["Web Development"],tags:["React","Server Components","Next.js","Performance"],readTime:12},{id:"8",title:"TypeScript Utility Types You Should Know",slug:"typescript-utility-types",author:p[1],publishedDate:new Date("2025-10-13"),excerpt:"TypeScript includes powerful utility types that can make your code more type-safe and maintainable. Let's explore the most useful ones.",content:"# TypeScript Utility Types You Should Know\n\nTypeScript's built-in utility types are incredibly powerful but often underutilized. Let's explore the most useful ones with practical examples.\n\n## Partial<Type>\n\nMakes all properties optional:\n\n```typescript\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nfunction updateUser(id: string, updates: Partial<User>) {\n  // updates can have any combination of User properties\n}\n\nupdateUser('123', { name: 'John' }); // ✅\n```\n\n## Required<Type>\n\nMakes all properties required:\n\n```typescript\ninterface Config {\n  apiUrl?: string;\n  timeout?: number;\n}\n\nconst defaultConfig: Required<Config> = {\n  apiUrl: 'https://api.example.com',\n  timeout: 3000,\n};\n```\n\n## Pick<Type, Keys>\n\nSelect specific properties:\n\n```typescript\ninterface BlogPost {\n  id: string;\n  title: string;\n  content: string;\n  author: string;\n  publishedDate: Date;\n}\n\ntype BlogPostPreview = Pick<BlogPost, 'id' | 'title' | 'author'>;\n```\n\n## Omit<Type, Keys>\n\nExclude specific properties:\n\n```typescript\ntype BlogPostInput = Omit<BlogPost, 'id' | 'publishedDate'>;\n\nfunction createPost(post: BlogPostInput) {\n  // id and publishedDate will be added by the system\n}\n```\n\n## Record<Keys, Type>\n\nCreate an object type with specific keys:\n\n```typescript\ntype UserRole = 'admin' | 'editor' | 'viewer';\n\nconst permissions: Record<UserRole, string[]> = {\n  admin: ['read', 'write', 'delete'],\n  editor: ['read', 'write'],\n  viewer: ['read'],\n};\n```\n\n## ReturnType<Type>\n\nExtract the return type of a function:\n\n```typescript\nfunction fetchUser() {\n  return {\n    id: '123',\n    name: 'John',\n    email: 'john@example.com',\n  };\n}\n\ntype User = ReturnType<typeof fetchUser>;\n// { id: string; name: string; email: string; }\n```\n\n## Parameters<Type>\n\nExtract function parameter types:\n\n```typescript\nfunction createUser(name: string, email: string, age: number) {\n  // ...\n}\n\ntype CreateUserParams = Parameters<typeof createUser>;\n// [string, string, number]\n```\n\n## Exclude<Type, ExcludedUnion>\n\nExclude types from a union:\n\n```typescript\ntype Status = 'pending' | 'approved' | 'rejected' | 'draft';\n\ntype PublicStatus = Exclude<Status, 'draft'>;\n// 'pending' | 'approved' | 'rejected'\n```\n\n## Extract<Type, Union>\n\nExtract types from a union:\n\n```typescript\ntype Shape =\n  | { kind: 'circle'; radius: number }\n  | { kind: 'square'; size: number }\n  | { kind: 'rectangle'; width: number; height: number };\n\ntype RectangularShape = Extract<Shape, { kind: 'square' | 'rectangle' }>;\n```\n\n## NonNullable<Type>\n\nRemove null and undefined:\n\n```typescript\ntype NullableString = string | null | undefined;\ntype String = NonNullable<NullableString>; // string\n```\n\n## Practical Example\n\nCombining utility types:\n\n```typescript\ninterface ApiResponse<T> {\n  data: T;\n  error: string | null;\n  loading: boolean;\n}\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n};\n\n// User creation payload (no id)\ntype CreateUserPayload = Omit<User, 'id'>;\n\n// User update payload (partial, no id)\ntype UpdateUserPayload = Partial<Omit<User, 'id'>>;\n\n// API response types\ntype UsersResponse = ApiResponse<User[]>;\ntype UserResponse = ApiResponse<User>;\n\n// Required configuration\ntype AppConfig = Required<{\n  apiUrl?: string;\n  timeout?: number;\n  retries?: number;\n}>;\n```\n\n## Conclusion\n\nTypeScript's utility types help you write more type-safe code with less duplication. Master these utilities and your TypeScript code will be more maintainable and expressive.",featuredImage:"https://images.unsplash.com/photo-1516116216624-53e697fedbea?w=800&h=400&fit=crop",categories:["Web Development"],tags:["TypeScript","Type Safety","Best Practices"],readTime:10},{id:"9",title:"Modern CSS: Container Queries Revolution",slug:"modern-css-container-queries",author:p[2],publishedDate:new Date("2025-10-14"),excerpt:"Container queries are finally here, enabling true component-based responsive design. Learn how to use them effectively.",content:"# Modern CSS: Container Queries Revolution\n\nContainer queries represent a fundamental shift in responsive design. Instead of responding to viewport size, components can respond to their container's size. Let's explore this game-changing feature.\n\n## The Problem with Media Queries\n\nTraditional media queries check viewport dimensions:\n\n```css\n/* This works, but it's not component-aware */\n@media (max-width: 768px) {\n  .card {\n    flex-direction: column;\n  }\n}\n```\n\nThe problem? The same component might need different layouts depending on where it's placed, not just the viewport size.\n\n## Enter Container Queries\n\nContainer queries let components respond to their container's size:\n\n```css\n.sidebar,\n.main {\n  container-type: inline-size;\n}\n\n.card {\n  display: flex;\n}\n\n@container (max-width: 400px) {\n  .card {\n    flex-direction: column;\n  }\n}\n```\n\nNow the card adapts based on its container, not the viewport!\n\n## Container Types\n\nThree container types are available:\n\n```css\n/* Size containers (most common) */\n.container {\n  container-type: inline-size; /* width */\n  container-type: block-size;  /* height */\n  container-type: size;        /* both */\n}\n```\n\n## Named Containers\n\nName containers for specific queries:\n\n```css\n.sidebar {\n  container-name: sidebar;\n  container-type: inline-size;\n}\n\n.main {\n  container-name: main;\n  container-type: inline-size;\n}\n\n/* Target specific containers */\n@container sidebar (max-width: 300px) {\n  .widget { /* ... */ }\n}\n\n@container main (max-width: 600px) {\n  .article { /* ... */ }\n}\n```\n\n## Container Query Units\n\nNew units based on container size:\n\n- `cqw`: 1% of container width\n- `cqh`: 1% of container height\n- `cqi`: 1% of container inline size\n- `cqb`: 1% of container block size\n- `cqmin`: Smaller of cqi or cqb\n- `cqmax`: Larger of cqi or cqb\n\n```css\n.card {\n  padding: 2cqi; /* Scales with container */\n  font-size: clamp(1rem, 3cqi, 2rem);\n}\n```\n\n## Practical Example: Responsive Card\n\n```css\n.card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n.card {\n  display: grid;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n/* Small container: stack vertically */\n@container card (max-width: 400px) {\n  .card {\n    grid-template-columns: 1fr;\n  }\n\n  .card__image {\n    width: 100%;\n  }\n}\n\n/* Medium container: side-by-side */\n@container card (min-width: 401px) and (max-width: 600px) {\n  .card {\n    grid-template-columns: 200px 1fr;\n  }\n}\n\n/* Large container: complex layout */\n@container card (min-width: 601px) {\n  .card {\n    grid-template-columns: 300px 1fr 200px;\n  }\n}\n```\n\n## Browser Support\n\nContainer queries are supported in all modern browsers (2023+):\n- Chrome 105+\n- Safari 16+\n- Firefox 110+\n\nFor older browsers, use a progressive enhancement approach.\n\n## Best Practices\n\n1. **Use inline-size by default**: Most components care about width, not height\n2. **Name your containers**: Makes queries more maintainable\n3. **Combine with media queries**: Use both for complete control\n4. **Test thoroughly**: Container queries can be complex\n5. **Progressive enhancement**: Ensure graceful degradation\n\n## Real-World Use Cases\n\n### 1. Reusable Card Components\n\nCards that work in sidebars, grids, or full-width layouts.\n\n### 2. Dashboard Widgets\n\nWidgets that adapt to different dashboard layouts.\n\n### 3. Form Layouts\n\nForms that stack or arrange horizontally based on space.\n\n### 4. Navigation Menus\n\nMenus that switch between horizontal and vertical.\n\n## Conclusion\n\nContainer queries enable truly modular, component-based responsive design. They're the missing piece that makes component libraries truly flexible and reusable across different contexts.",featuredImage:"https://images.unsplash.com/photo-1545670723-196ed0954986?w=800&h=400&fit=crop",categories:["Web Development","Design Systems"],tags:["CSS","Container Queries","Responsive Design"],readTime:9},{id:"10",title:"Building a Developer Portfolio That Stands Out",slug:"building-developer-portfolio",author:p[0],publishedDate:new Date("2025-10-15"),excerpt:"Your portfolio is often your first impression. Learn how to create a portfolio that showcases your skills and lands you opportunities.",content:"# Building a Developer Portfolio That Stands Out\n\nA great portfolio can be the difference between getting an interview and being overlooked. Let's build something that truly represents your skills.\n\n## What Makes a Great Portfolio?\n\n1. **Clear value proposition** - What do you do?\n2. **Strong projects** - Quality over quantity\n3. **Easy navigation** - Don't make visitors hunt\n4. **Fast performance** - Practice what you preach\n5. **Personal touch** - Show your personality\n\n## Essential Sections\n\n### 1. Hero Section\n\nMake a strong first impression:\n\n```\n- Your name and title\n- Brief tagline (one sentence)\n- Call-to-action (Contact, Resume, GitHub)\n- Professional photo (optional)\n```\n\n### 2. About Section\n\nTell your story:\n\n```\n- Who you are\n- What you do\n- What you're passionate about\n- Your background and journey\n- Keep it conversational and authentic\n```\n\n### 3. Projects Section\n\nThis is the heart of your portfolio:\n\n**For each project include:**\n- Clear title and description\n- Technologies used\n- Your role and contributions\n- Link to live demo\n- Link to source code (if public)\n- Screenshots or video demo\n- Key challenges and solutions\n\n**Quality over quantity:**\n3-5 excellent projects > 20 mediocre ones\n\n### 4. Skills Section\n\nBe honest about your skills:\n\n```\n- Core technologies (Expert level)\n- Comfortable with (Intermediate)\n- Learning (Beginner)\n```\n\nAvoid rating yourself with stars or percentages—they're meaningless.\n\n### 5. Contact Section\n\nMake it easy to reach you:\n\n```\n- Email\n- GitHub\n- LinkedIn\n- Twitter (if active)\n- Resume download\n```\n\n## Design Tips\n\n### Keep It Simple\n\n- Clean, minimal design\n- Plenty of whitespace\n- Consistent typography\n- Limited color palette\n- Clear hierarchy\n\n### Make It Fast\n\n- Optimize images\n- Minimize JavaScript\n- Use system fonts or web fonts carefully\n- Lazy load below-fold content\n- Achieve good Lighthouse scores\n\n### Make It Accessible\n\n- Semantic HTML\n- Keyboard navigation\n- Screen reader friendly\n- Good contrast ratios\n- Responsive design\n\n## Technical Choices\n\n### Static Site Generators\n\nPerfect for portfolios:\n- Next.js (React)\n- Astro (multi-framework)\n- Hugo (Go-based, very fast)\n- Eleventy (JavaScript)\n\n### Hosting\n\nFree and easy options:\n- Vercel\n- Netlify\n- GitHub Pages\n- Cloudflare Pages\n\n## Common Mistakes to Avoid\n\n❌ **Auto-playing music/video** - Just don't\n❌ **Too many animations** - Distracting and slow\n❌ **Wall of text** - Use visuals and whitespace\n❌ **Broken links** - Test everything\n❌ **Mobile unfriendly** - Mobile-first design\n❌ **Slow loading** - Performance matters\n❌ **No real projects** - Tutorial clones aren't enough\n\n## Project Ideas\n\nIf you need portfolio projects:\n\n1. **Solve a real problem** you or others have\n2. **Rebuild a popular app** with your twist\n3. **Contribute to open source** and showcase it\n4. **Build developer tools** (VSCode extension, CLI, etc.)\n5. **Create visualizations** of interesting data\n\n## Stand Out Elements\n\n### 1. Write About Your Projects\n\nBlog posts showing your thought process demonstrate:\n- Problem-solving skills\n- Communication ability\n- Technical depth\n- Continuous learning\n\n### 2. Show Your Process\n\nInclude:\n- Wireframes or mockups\n- Architecture decisions\n- Performance optimizations\n- Challenges overcome\n\n### 3. Make It Interactive\n\nAdd interesting interactions:\n- Smooth animations\n- Code playgrounds\n- Interactive demos\n- Easter eggs (subtle ones)\n\n## Continuous Improvement\n\nYour portfolio is never \"done\":\n\n1. **Update regularly** - Keep it current\n2. **Gather feedback** - Ask peers to review\n3. **Monitor analytics** - See what people view\n4. **A/B test** - Try different approaches\n5. **Refine projects** - Quality improves with iteration\n\n## Final Thoughts\n\nYour portfolio represents you when you can't be there in person. Make it:\n- Professional but personal\n- Polished but not pretentious\n- Impressive but accessible\n\nFocus on quality, clarity, and authenticity. Show your work, share your story, and make it easy for opportunities to find you.\n\nGood luck building!",featuredImage:"https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=800&h=400&fit=crop",categories:["Developer Experience"],tags:["Career","Portfolio","Personal Branding"],readTime:13}];class h{async delay(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return new Promise(t=>{setTimeout(()=>t(e),n)})}async getAllPosts(){let e=[...this.posts].sort((e,n)=>n.publishedDate.getTime()-e.publishedDate.getTime());return this.delay(e)}async getPostById(e){let n=this.posts.find(n=>n.id===e)||null;return this.delay(n)}async getPostBySlug(e){let n=this.posts.find(n=>n.slug===e)||null;return this.delay(n)}async getPostsByCategory(e){let n=this.posts.filter(n=>n.categories.some(n=>n.toLowerCase()===e.toLowerCase())).sort((e,n)=>n.publishedDate.getTime()-e.publishedDate.getTime());return this.delay(n)}async getPostsByTag(e){let n=this.posts.filter(n=>n.tags.some(n=>n.toLowerCase()===e.toLowerCase())).sort((e,n)=>n.publishedDate.getTime()-e.publishedDate.getTime());return this.delay(n)}async getCategories(){return this.delay(this.categories)}async getTags(){let e=Array.from(new Set(this.posts.flatMap(e=>e.tags))).sort();return this.delay(e)}constructor(){this.posts=m,this.categories=u}}let g=new h;t(9731),t(7130),t(8590),t(8188);let y=(0,s.memo)(function(e){let{post:n,onClick:t}=e,i=(0,s.useMemo)(()=>n.publishedDate.toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}),[n.publishedDate]);return(0,a.jsxs)("article",{...{className:"x18q68pp x1jdwtrm xb3r6kr xsxxsk4 x18fzsat x1ypdohk x5yr21d x78zum5 xdt5ytf x1n3u82n x1967rpz"},onClick:t,onKeyDown:e=>{("Enter"===e.key||" "===e.key)&&t&&(e.preventDefault(),t())},tabIndex:0,role:"button","aria-label":"Read article: ".concat(n.title),children:[(0,a.jsx)("img",{src:n.featuredImage,alt:"Featured image for ".concat(n.title),loading:"lazy",decoding:"async",onError:e=>{e.currentTarget.src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='200' viewBox='0 0 400 200'%3E%3Crect fill='%23D2B48C' width='400' height='200'/%3E%3Ctext fill='%236B3E2E' font-family='sans-serif' font-size='18' x='50%25' y='50%25' text-anchor='middle' dominant-baseline='middle'%3EImage unavailable%3C/text%3E%3C/svg%3E"},...{className:"xh8yej3 x1m3v4wt xl1xv1r x1tkb0kn"}}),(0,a.jsxs)("div",{...{className:"xpjs66o x78zum5 xdt5ytf xwxzk5 x98rzlu"},children:[(0,a.jsx)("h2",{...{className:"x1vbjif9 xnyk5jo x15p4bp3 x5snh1l x1ghz6dp xtqyxyv"},children:n.title}),(0,a.jsx)("div",{...{className:"x78zum5 x6s0dn4 xwxzk5 x1a02dak"},children:(0,a.jsx)("span",{className:"x4uooum x1mq16f1",children:i})}),(0,a.jsx)("p",{...{className:"x10ipfuh x6egquz x1ah7ww0 x1ghz6dp x98rzlu"},children:n.excerpt}),(0,a.jsxs)("div",{...{className:"x78zum5 x1qughib x6s0dn4 x1a02dak x1jra0wb xr1yuqi"},children:[(0,a.jsx)("div",{...{className:"x78zum5 x1jra0wb x1a02dak"},children:n.categories.slice(0,2).map(e=>(0,a.jsx)("span",{className:"xgx5txn xfhvyxl xs7nli8 xoulthd x7qxfbq x1xzdkeb",children:e},e))}),(0,a.jsx)("div",{...{className:"x78zum5 x1jra0wb x1a02dak"},children:n.tags.slice(0,3).map(e=>(0,a.jsxs)("span",{className:"xgx5txn x1ytkq6n x1xzdkeb",children:["#",e]},e))})]})]})]})});t(316);let f=(0,s.memo)(function(e){let{posts:n,loading:t,onPostClick:i}=e;return t?(0,a.jsx)("div",{...{className:"x1ikqzku x19bbpc0 xpjs66o"},children:(0,a.jsx)("div",{className:"x2b8uid x18b7vh7 xngnso2",children:"Loading posts..."})}):0===n.length?(0,a.jsx)("div",{...{className:"x1ikqzku x19bbpc0 xpjs66o"},children:(0,a.jsx)("div",{className:"x2b8uid x18b7vh7 xvewgow x197sbye",children:"No posts found."})}):(0,a.jsx)("div",{...{className:"x1ikqzku x19bbpc0 xpjs66o"},children:(0,a.jsx)("div",{...{className:"xrvj5dj x1y6fwsi x1oeajo1 x1vyjuow xukydkr"},children:n.map(e=>(0,a.jsx)(y,{post:e,onClick:()=>null==i?void 0:i(e)},e.id))})})});function x(e){let{post:n,onClose:t}=e,i=(0,s.useRef)(null),r=(0,s.useRef)(null),o=n.publishedDate.toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"});return(0,s.useEffect)(()=>(document.body.style.overflow="hidden",()=>{document.body.style.overflow="unset"}),[]),(0,s.useEffect)(()=>{var e;null==(e=r.current)||e.focus()},[]),(0,s.useEffect)(()=>{let e=e=>{"Escape"===e.key&&t()};return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)}},[t]),(0,s.useEffect)(()=>{let e=i.current;if(!e)return;let n=e.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'),t=n[0],a=n[n.length-1],s=e=>{"Tab"===e.key&&(e.shiftKey?document.activeElement===t&&(e.preventDefault(),a.focus()):document.activeElement===a&&(e.preventDefault(),t.focus()))};return e.addEventListener("keydown",s),()=>{e.removeEventListener("keydown",s)}},[]),(0,a.jsx)("div",{...{className:"xixxii4 x13vifvy xu96u03 x3m8u43 x1ey2m1c x7k1rzw x78zum5 x6s0dn4 xl56j7k xpjs66o xfo81ep x1odjw0f"},onClick:e=>{e.target===e.currentTarget&&t()},role:"dialog","aria-modal":"true","aria-labelledby":"modal-title",children:(0,a.jsxs)("div",{...{className:"x1x5nx4c x1jdwtrm x1ap80js xh8yej3 xqui1pq x1odjw0f x1n2onr6 xqx58kd"},ref:i,children:[(0,a.jsxs)("div",{...{className:"x17gbvfo x1cfva83"},children:[(0,a.jsx)("button",{className:"x7wzq59 x18xflxz xuqcfcy x18mqm2i x1rkhwc6 x1kcqd03 xc342km xng3xce xj5rrp1 x100vrsf x1vqgdyp xnyk5jo x1ypdohk x78zum5 x6s0dn4 xl56j7k x1urgwn6 x1n327nk x1q2v7np",onClick:t,"aria-label":"Close modal",ref:r,children:"\xd7"}),(0,a.jsx)("img",{src:n.featuredImage,alt:"Featured image for ".concat(n.title),loading:"lazy",decoding:"async",onError:e=>{e.currentTarget.src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='800' height='400' viewBox='0 0 800 400'%3E%3Crect fill='%23D2B48C' width='800' height='400'/%3E%3Ctext fill='%236B3E2E' font-family='sans-serif' font-size='24' x='50%25' y='50%25' text-anchor='middle' dominant-baseline='middle'%3EImage unavailable%3C/text%3E%3C/svg%3E"},...{className:"xh8yej3 x16nrsnc xl1xv1r x9rfyui x161ecfu"}}),(0,a.jsx)("h1",{...{className:"x1vbjif9 x14omavb x15p4bp3 x5snh1l x8jfqxa xtqyxyv"},id:"modal-title",children:n.title}),(0,a.jsx)("div",{...{className:"x78zum5 x6s0dn4 xm8fb5o x1a02dak x75zjhk x5gokl9 xlxy82 x1q0q8m5 x8cothc"},children:(0,a.jsx)("span",{className:"x4uooum x1mq16f1",children:o})})]}),(0,a.jsxs)("div",{...{className:"x1c4sqhz"},children:[(0,a.jsx)("div",{...{className:"x10rqot0 x6egquz x1ah7ww0 x126k92a xnxec26"},children:n.content}),(0,a.jsx)("div",{...{className:"x78zum5 x1jra0wb x1a02dak x16env64 x18m1r48 x178xt8z x13fuv20 xv96d80"},children:n.tags.map(e=>(0,a.jsxs)("span",{className:"x4uooum xme368l x1tkb0kn xoulthd x9rfyui x1xzdkeb",children:["#",e]},e))})]})]})})}t(5277),t(4951);let b=(0,s.memo)(function(e){let{categories:n,selectedCategory:t,onSelectCategory:i}=e;return(0,a.jsx)("div",{...{className:"x1ikqzku x19bbpc0 xpjs66o"},children:(0,a.jsxs)("div",{...{className:"x78zum5 xwxzk5 x1a02dak xl56j7k x75zjhk"},children:[(0,a.jsx)("button",{...{0:{className:"xg1mh6t xjdr3nj x1ah7ww0 xdh2fpr x1y0btm7 x12aj72i xj5rrp1 x10ipfuh x1xzdkeb x1ypdohk xurpv0g xngsmnj xqscbb7 x1p5mj54"},1:{className:"xg1mh6t xdh2fpr x1y0btm7 xj5rrp1 x10ipfuh x1xzdkeb x1ypdohk xurpv0g x1rkhwc6 x1kcqd03 x1ekv0mc x1743le3 x17ol6q4 xqf2c8p"}}[null===t|0],onClick:()=>i(null),children:"All Posts"}),n.map(e=>(0,a.jsx)("button",{...{0:{className:"xg1mh6t xjdr3nj x1ah7ww0 xdh2fpr x1y0btm7 x12aj72i xj5rrp1 x10ipfuh x1xzdkeb x1ypdohk xurpv0g xngsmnj xqscbb7 x1p5mj54"},1:{className:"xg1mh6t xdh2fpr x1y0btm7 xj5rrp1 x10ipfuh x1xzdkeb x1ypdohk xurpv0g x1rkhwc6 x1kcqd03 x1ekv0mc x1743le3 x17ol6q4 xqf2c8p"}}[t===e|0],onClick:()=>i(e),children:e},e))]})})});function v(){let[e,n]=(0,s.useState)([]),[t,i]=(0,s.useState)(!0),[r,o]=(0,s.useState)(null),[l,c]=(0,s.useState)(null),[d,p]=(0,s.useState)(null),[u,m]=(0,s.useState)([]),[h,y]=(0,s.useState)(!1);(0,s.useEffect)(()=>{w(),k()},[]);let v=(0,s.useMemo)(()=>null===d?e:e.filter(e=>e.categories.includes(d)),[d,e]),w=async()=>{i(!0),o(null);try{let e=await g.getAllPosts();n(e)}catch(e){o(e instanceof Error?e.message:"Failed to load blog posts. Please try again later."),console.error("Failed to load posts:",e)}finally{i(!1)}},k=async()=>{try{let e=await g.getCategories();m(e.map(e=>e.name)),y(!1)}catch(e){console.error("Failed to load categories:",e),y(!0)}};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(b,{categories:u,selectedCategory:d,onSelectCategory:e=>{p(e)}}),h&&(0,a.jsx)("div",{className:"x1245n8j xypqh3q x1ikqzku xmn8u8 x1kcqd03 x12oqio5 x1nrrp6k x2b8uid x1iy03kw",children:"Unable to load categories. Showing all posts."}),r&&(0,a.jsxs)("div",{...{className:"x17gbvfo xqx58kd xrlsmeg xbrk8jg xcjl74c xur7f20 x2b8uid"},children:[(0,a.jsx)("p",{className:"xt3le0l x1pzq3k6 x1hptrd9 x117nqv4",children:"Error Loading Posts"}),(0,a.jsx)("p",{className:"xoulthd x1pzq3k6",children:r}),(0,a.jsx)("button",{onClick:w,className:"xme368l x1rkhwc6 x1kcqd03 x1gs6z28 x12oqio5 x1ypdohk x1jchvi3 x1743le3 x16w6rbs",children:"Try Again"})]}),(0,a.jsx)(f,{posts:v,loading:t,onPostClick:e=>{c(e)}}),l&&(0,a.jsx)(x,{post:l,onClose:()=>{c(null)}})]})}function w(){return(0,a.jsx)(v,{})}t(2899)},316:()=>{},2899:()=>{},4951:()=>{},5277:()=>{},5379:(e,n,t)=>{Promise.resolve().then(t.bind(t,23))},7130:()=>{},8188:()=>{},8590:()=>{},9731:()=>{}},e=>{e.O(0,[17,441,255,358],()=>e(e.s=5379)),_N_E=e.O()}]);